version: '3.9'

services:
  pokemon-showdown:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pokemon-showdown
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PS_PORT=8000
      - PS_BINDADDR=0.0.0.0
      - PS_WORKERS=1
      - PS_CRASHGUARD=true
      - DATABASE_URL=postgres://postgres:password@postgres:5432/pokemonshowdown
      - MYSQL_URL=mysql://root:password@mysql:3306/pokemonshowdown
    volumes:
      - ./config:/app/config:rw
      - ./logs:/app/logs:rw
      - pokemon-showdown-data:/app/data:rw
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - pokemon-showdown-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: pokemon-showdown-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=pokemonshowdown
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pokemon-showdown-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mysql:
    image: mysql:8.0
    container_name: pokemon-showdown-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=pokemonshowdown
      - MYSQL_USER=pokemonshowdown
      - MYSQL_PASSWORD=password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - pokemon-showdown-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: --default-authentication-plugin=mysql_native_password

  # Optional: Redis for caching (if you want to add caching capabilities)
  redis:
    image: redis:7-alpine
    container_name: pokemon-showdown-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - pokemon-showdown-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: pokemon-showdown-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pokemon-showdown
    networks:
      - pokemon-showdown-network
    profiles:
      - production

volumes:
  postgres-data:
    driver: local
  mysql-data:
    driver: local
  redis-data:
    driver: local
  pokemon-showdown-data:
    driver: local

networks:
  pokemon-showdown-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

